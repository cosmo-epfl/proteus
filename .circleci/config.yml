version: 2

# The default job builds the code, Python bindings and tests with different
# compilers, and then run the corresponding tests. The compilers to used are
# indicated by the CC/CXX environment variables.
default_job: &default_job
  docker:
    - image: cosmoepfl/rascal-ci:6
  steps:
    - checkout
    - run:
        name: Install Python dependencies
        command: python3.8 -m pip install -r requirements/dev.txt
    - run:
        name: Configure
        command: |
          mkdir build
          cd build
          cmake ${CMAKE_EXTRA} \
                -DBUILD_BINDINGS=ON \
                -DBUILD_TESTS=ON \
                -DBUILD_EXAMPLES=ON \
                -DBUILD_PROFILES=ON \
                -DBUILD_BENCHMARKS=ON \
                -DRUN_BENCHMARKS_FLAGS=--benchmark_min_time=0.0000001 \
                -DCPPLINT=CPPLINT-NOTFOUND \
                -DCMAKE_C_COMPILER=$CC -DCMAKE_CXX_COMPILER=$CXX ..
    - run:
        name: Build
        command: cd build && make -j2
    - run:
        name: Run tests
        command: cd build && ctest --output-on-failure
        # valgrind tests can take more than 10min
        no_output_timeout: 20m
    - run:
        name: Run benchmarks
        command: cd build && make benchmarks


jobs:
  gcc-5:
    environment:
      CC: gcc-5
      CXX: g++-5
    <<: *default_job
  gcc-10:
    environment:
      CC: gcc-10
      CXX: g++-10
    <<: *default_job
  gcc-10-debug:
    environment:
      CC: gcc-10
      CXX: g++-10
      CMAKE_EXTRA: -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS_DEBUG=
    <<: *default_job
  clang-4:
    environment:
      CC: clang-4.0
      CXX: clang++-4.0
    <<: *default_job
  clang-9:
    environment:
      CC: clang-9
      CXX: clang++-9
    <<: *default_job
  clang-9-debug:
    environment:
      CC: clang-9
      CXX: clang++-9
      CMAKE_EXTRA: -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS_DEBUG=
    <<: *default_job
  valgrind:
    environment:
      CC: gcc-10
      CXX: g++-10
      CMAKE_EXTRA: -DRASCAL_TESTS_USE_VALGRIND=ON -DTYPE_ARCHITECTURE=core2
    <<: *default_job

  # Special job only building the documentation
  docs:
    environment:
      LC_ALL: C.UTF-8
      LANG: C.UTF-8
    docker:
    - image: cosmoepfl/rascal-ci:6
    steps:
      - checkout
      - run:
          name: Install Python dependencies
          command: python3.8 -m pip install -r requirements/doc.txt
      - run:
          name: Configure
          command: |
            mkdir build
            cd build
            cmake -DBUILD_DOC=ON -DBUILD_BINDINGS=ON ..
      - run:
          name: Build docs
          command: cd build && make doc
      - run:
          name: Deploy docs
          command: |
            if [[ $CIRCLE_BRANCH == "master" ]]; then
                ./.circleci/deploy-docs.sh
                cd gh-pages
                git push -q https://${GH_TOKEN}@github.com/cosmo-epfl/librascal.git gh-pages
            fi

  # Special job only linting the code
  lint:
    environment:
      LC_ALL: C.UTF-8
      LANG: C.UTF-8
    docker:
    - image: cosmoepfl/rascal-ci:6
    steps:
      - checkout
      - run:
          name: Install Python dependencies
          command: python3.8 -m pip install -r requirements/dev.txt
      - run:
          name: Configure
          command: |
            mkdir build
            cd build
            cmake -DBUILD_BINDINGS=OFF ..
      - run:
          name: Lint the code
          command: cd build && make lint

  # Special job checking that make-pretty was run
  pretty:
    docker:
    - image: cosmoepfl/rascal-ci:6
    steps:
      - checkout
      - run:
          name: Install Python dependencies
          command: python3.8 -m pip install -r requirements/dev.txt
      - run:
          name: Configure
          command: |
            ln -s $(which clang-format-9) /usr/local/bin/clang-format
            mkdir build
            cd build
            cmake -DBUILD_BINDINGS=OFF ..
      - run:
          name: clang-format
          command: |
            cd build && make pretty-cpp && git diff --exit-code

  # Special job collecting code coverage
  coverage:
    docker:
    - image: cosmoepfl/rascal-ci:6
    steps:
      - checkout
      - run:
          name: Install Python dependencies
          command: |
            python3.8 -m pip install -r requirements/dev.txt
            python3.8 -m pip install codecov coverage
      - run:
          name: Configure
          command: |
            mkdir build && cd build
            cmake -DBUILD_BINDINGS=ON -DBUILD_TESTS=ON \
                  -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-coverage" \
                  ..
      - run:
          name: Build
          command: cd build && make
      - run:
          name: Run C++ tests
          command: cd build && ctest
      - run:
          name: Run Python tests
          command: coverage run tests/python/python_binding_tests.py
          environment:
            PYTHONPATH: build/
      - run:
          name: Collect and upload coverage
          command: |
            find . -type f -name '*.gcno' -exec gcov-7 -pb {} +
            rm -f \#usr\#*.gcov
            rm -f *\#external\#*.gcov
            codecov -X gcov

  # Special job to check that the example notebooks run
  notebooks:
    environment:
      CC: gcc-10
      CXX: g++-10
    docker:
      - image: cosmoepfl/rascal-ci:6
    steps:
      - checkout
      - run:
          name: Install Python dependencies
          command: python3.8 -m pip install -r requirements/tests.txt
      - run:
          name: Configure
          command: |
            mkdir build
            cd build
            cmake ${CMAKE_EXTRA} \
                  -DBUILD_BINDINGS=ON \
                  -DBUILD_TESTS=OFF \
                  -DBUILD_EXAMPLES=OFF \
                  -DBUILD_PROFILES=OFF \
                  -DCPPLINT=CPPLINT-NOTFOUND \
                  -DCMAKE_C_COMPILER=$CC \
                  -DCMAKE_CXX_COMPILER=$CXX ..
      - run:
          name: Build
          command: cd build && make -j2
      - run:
          name: Validate notebooks
          command: cd examples && PYTHONPATH=${PWD}/../build pytest --nbval-lax *.ipynb
          # Notebook validation really shouldn't take this long...
          no_output_timeout: 20m

workflows:
  version: 2
  build_and_test:
    jobs:
      - lint
      - docs
      - pretty
      - valgrind
      - notebooks
      - coverage
      - gcc-5
      - gcc-10
      - gcc-10-debug
      - clang-4
      - clang-9
      - clang-9-debug
